from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import json
from db import create_pool


pool = None

router = Router()

class PreferencesForm(StatesGroup):
    cuisine = State()
    interests = State()
    user_id = State()
    username = State()

class PreferencesFormEdit(StatesGroup):
    cuisine_edit = State()
    interests_edit = State()
    user_id_edit = State()

class RateForm(StatesGroup):
    place = State()
    rating = State()

class SearchForm(StatesGroup):
    query = State()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    global pool
    pool = await create_pool()
    async with pool.acquire() as connection:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        exists = await connection.fetchrow("SELECT * FROM users WHERE user_id = $1", message.from_user.id)
        if exists:
            preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1;", message.from_user.id)
            preferences = json.loads(preferences['preferences'])
            cuisine_out = ", ".join([i.title() for i in preferences["cuisine"]])
            interests_out = ", ".join([i.title() for i in preferences["interests"]])
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! üòä\n"
                f"–í–æ—Ç —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                f"üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ: {cuisine_out}\n"
                f"üåü –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {interests_out}\n\n"
                f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /edit."
            )
        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! üëã\n"
                             f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –≥–∏–¥ –±–æ—Ç–µ –ø–æ –†–æ—Å—Ç–æ–≤—É-–Ω–∞-–î–æ–Ω—É! üåÜ‚ú®\n"
                             f"–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—É—Ö–Ω–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è? üçΩÔ∏è\n"
                             f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è, —Ä—É—Å—Å–∫–∞—è –∏ —Ç.–¥.)")
            await state.set_state(PreferencesForm.cuisine)

@router.message(PreferencesForm.cuisine)
async def process_cuisine(message: Message, state: FSMContext):
    cuisine = message.text.split(",")
    await state.update_data(cuisine=cuisine)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ç—É—Ä–∏–∑–º, —Å–ø–æ—Ä—Ç, –µ–¥–∞ –∏ —Ç.–¥.) üåü")
    await state.set_state(PreferencesForm.interests)

@router.message(PreferencesForm.interests)
async def process_interests(message: Message, state: FSMContext):
    interests = message.text.split(",")
    user_id = message.from_user.id
    username = message.from_user.username
    await state.update_data(interests=interests)
    await state.update_data(user_id=user_id)
    await state.update_data(username=username)
    data = await state.get_data()
    cuisine_out = ", ".join([i.title() for i in data["cuisine"]])
    interests_out = ", ".join([i.title() for i in interests])

    await message.answer(f"üìã –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n\n"
                f"üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ: {cuisine_out}\n"
                f"üåü –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {interests_out}\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ? ü§î", reply_markup=kb.apply_right)

@router.message(Command("edit"))
async def edit_profile(message: Message):
    pool = await create_pool()
    async with pool.acquire() as connection:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        exists = await connection.fetchrow("SELECT * FROM users WHERE user_id = $1", message.from_user.id)
        if exists:
            preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1;", message.from_user.id)
            preferences = json.loads(preferences['preferences'])
            cuisine_out = ", ".join([i.title() for i in preferences["cuisine"]])
            interests_out = ", ".join([i.title() for i in preferences["interests"]])
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! üòä\n"
                f"–í–æ—Ç —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                f"üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ: {cuisine_out}\n"
                f"üåü –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {interests_out}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=kb.edit_profile)
        else:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                                 "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

@router.callback_query(F.data == "edit_profile_food_preferences")
async def edit_profile_food_preferences(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üçΩÔ∏è –î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ! –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∫—É—Ö–Ω–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è, —Ä—É—Å—Å–∫–∞—è –∏ —Ç.–¥.).")
    await state.set_state(PreferencesFormEdit.cuisine_edit)

@router.message(PreferencesFormEdit.cuisine_edit)
async def edit_profile_process_cuisine(message: Message, state: FSMContext):
    cuisine = message.text.split(",")
    cuisine_out = ", ".join([i.title() for i in cuisine])
    await state.update_data(cuisine_edit=cuisine)
    await state.update_data(user_id_edit=message.from_user.id)
    await message.answer("–£—Å–ø–µ—à–Ω–æ! üéâ\n"
                         f"–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {cuisine_out}", reply_markup=kb.edit_profile_process_cuisine)

@router.callback_query(F.data == "edit_profile_process_cuisine_apply")
async def edit_profile_cuisine_preferences(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    pool = await create_pool()
    async with pool.acquire() as connection:
        preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1;", data["user_id_edit"])
        preferences = json.loads(preferences['preferences'])
        interests = preferences["interests"]
        preferences = {
            "cuisine": data["cuisine_edit"],
            "interests": interests
        }
        await connection.execute("UPDATE users SET preferences = $1 WHERE user_id = $2", json.dumps(preferences), data["user_id_edit"])
    await callback.message.answer("‚úÖ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /profile, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.")
    await state.clear()

@router.callback_query(F.data == "edit_profile_interest_preferences")
async def edit_profile_interest_preferences(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üéØ –î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º! –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—É—Ä–∏–∑–º, —Å–ø–æ—Ä—Ç, –µ–¥–∞ –∏ —Ç.–¥.).")
    await state.set_state(PreferencesFormEdit.interests_edit)

@router.message(PreferencesFormEdit.interests_edit)
async def edit_profile_process_interests(message: Message, state: FSMContext):
    interests = message.text.split(",")
    interests_out = ", ".join([i.title() for i in interests])
    await state.update_data(interests_edit=interests)
    await state.update_data(user_id_edit=message.from_user.id)
    await message.answer("–£—Å–ø–µ—à–Ω–æ! üéâ\n"
                         f"–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {interests_out}", reply_markup=kb.edit_profile_process_interests)


@router.callback_query(F.data == "edit_profile_process_interests_apply")
async def edit_profile_interest_preferences(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    pool = await create_pool()
    async with pool.acquire() as connection:
        preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1;", data["user_id_edit"])
        preferences = json.loads(preferences['preferences'])
        cuisine = preferences["cuisine"]
        preferences = {
            "cuisine": cuisine,
            "interests": data["interests_edit"]
        }
        await connection.execute("UPDATE users SET preferences = $1 WHERE user_id = $2", json.dumps(preferences), data["user_id_edit"])
    await callback.message.answer("‚úÖ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /profile, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.")
    await state.clear()

@router.callback_query(F.data == "edit_profile_cancel")
async def edit_profile_cancel(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /edit.")

@router.callback_query(F.data == "yes_apply_right")
async def yes(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    preferences = {
        "cuisine": data["cuisine"],
        "interests": data["interests"]
    }
    async with pool.acquire() as connection:
        await connection.execute("INSERT INTO users (user_id, username, preferences) VALUES ($1, $2, $3)", data["user_id"], data["username"], json.dumps(preferences))
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb.start)
        await state.clear()

@router.message(Command("profile"))
async def profile(message: Message):
    pool = await create_pool()
    async with pool.acquire() as connection:
        exists = await connection.fetchrow("SELECT * FROM users WHERE user_id = $1", message.from_user.id)
        if exists:
            preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1;", message.from_user.id)
            preferences = json.loads(preferences['preferences'])
            cuisine = preferences["cuisine"]
            interests = preferences["interests"]
            cuisine_out = ", ".join([i.title() for i in cuisine])
            interests_out = ", ".join([i.title() for i in interests])
            await message.reply("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                        f"üçΩÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ:\n"
                        f"{cuisine_out}\n"
                        f"üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º:\n"
                        f"{interests_out}\n\n"
                        f"üîÑ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit.")
        else:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                                 "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

@router.callback_query(F.data == "no_apply_right")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PreferencesForm.cuisine)
    await  callback.message.answer("–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—É—Ö–Ω–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è? üçΩÔ∏è\n"
                                   "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è, —Ä—É—Å—Å–∫–∞—è –∏ —Ç.–¥.)")

@router.callback_query(F.data == "On_the_way")
async def On_the_way(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(id=callback.from_user.id)
    data = await state.get_data()
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ!üåü –ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?\n"
                                   f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,\n"
                                   f"–≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å üçΩÔ∏è –∏–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä üõçÔ∏è?\n"
                                   f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:", reply_markup=kb.apply_info)
    await state.clear()

####
@router.message(Command("recommendations"))
async def get_recommendations(message: Message):
    user_id = message.from_user.id
    async with pool.acquire() as connection:
        preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1", user_id)
        if preferences:
            preferences = json.loads(preferences["preferences"])
            recommendations = generate_recommendations(preferences)
            await message.answer(f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@router.message(Command("rate"))
async def rate_place(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
    await RateForm.place.set()

@router.message(RateForm.place)
async def process_place(message: Message, state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5):")
    await RateForm.rating.set()

@router.message(RateForm.rating)
async def process_rating(message: Message, state: FSMContext):
    user_id = message.from_user.id
    rating = int(message.text)
    data = await state.get_data()
    place = data["place"]
    async with pool.acquire() as connection:
        await connection.execute("INSERT INTO ratings (user_id, place_name, rating) VALUES ($1, $2, $3)", user_id, place, rating)
    await message.answer(f"–ú–µ—Å—Ç–æ '{place}' –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ {rating}.")
    await state.clear()


def generate_recommendations(preferences):
    cuisine = preferences.get("cuisine", [])
    interests = preferences.get("interests", [])
    return f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {', '.join(cuisine)} –∫—É—Ö–Ω—è, –º–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ {', '.join(interests)}"

####