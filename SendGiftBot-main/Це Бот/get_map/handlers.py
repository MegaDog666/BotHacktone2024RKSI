from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from states import PreferencesForm, pointForm
import get_map.keyboards as kb
import json
from get_map.utils import search_by_cuisine, search_by_interests
from config import API_KEY_2GIS
from db import create_pool, get_user_preferences_or_notify
from gpt import answer

router = Router()
pool = None

class pointForm(StatesGroup):
    waiting_for_location = State()

class map_struct(StatesGroup):
    position = State()

@router.callback_query(F.data == "On_the_way")
async def answer_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", reply_markup=kb.location_keyboard)
    await state.set_state(pointForm.waiting_for_location)

@router.message(F.location, pointForm.waiting_for_location)
async def handle_location(message: Message, state: FSMContext):
    global latitude
    global longitude
    latitude = message.location.latitude
    longitude = message.location.longitude
    await message.answer(f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: —à–∏—Ä–æ—Ç–∞ {latitude}, –¥–æ–ª–≥–æ—Ç–∞ {longitude}."
                         f"\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=kb.apply_info)
    await state.update_data(latitude=latitude, longitude=longitude)

@router.callback_query(F.data == "randomChatGPT")
async def randomChatGPT(callback: CallbackQuery, state: FSMContext, API_KEY=API_KEY_2GIS):
    await callback.answer()
    await callback.message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –°hatGPT –≤—ã–±–∏—Ä–∞–µ—Ç –¥–ª—è –≤–∞—Å –º–µ—Å—Ç–æ!")
    data = await state.get_data()
    user_latitude = data.get("latitude")
    user_longitude = data.get("longitude")
    cuisine = answer("", "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ —Ä–æ—Å—Ç–æ–≤–µ –Ω–∞ –¥–æ–Ω—É, —ç—Ç–æ –±—É–¥–µ—Ç –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç —Ç–µ–±—è, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç—å —Ç–∞–∫: (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–¥–∞, –∏—Å—Å–∫—É—Å—Ç–≤–æ, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)), —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å –∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞ —Ç–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤–æ—Ç –∑–∞–ø—Ä–æ—Å, —Å—Ä–∞–∑—É –ø–∏—à–∏ –æ—Ç–≤–µ—Ç!!!!")
    print(cuisine)
    places = await search_by_cuisine(cuisine, API_KEY, user_longitude, user_latitude)
    for place in places[:1]:
        if place:
            name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            address = place.get('address_name', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            rating = place.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
            latitude = place.get("latitude")
            longitude = place.get("longitude")
            await callback.message.answer(
            f"üè¨ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name.split(",")[0]}\nüìç *–ê–¥—Ä–µ—Å:* {address}\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating} ‚≠ê\n\n"
            "–í–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:", parse_mode="Markdown")
            await callback.message.answer_venue(
                title=name.split(",")[0],
                address=address,
                latitude=latitude,
                longitude=longitude,
                user_latitude=user_latitude,
                user_longitude=user_longitude
            )
        else:
            await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.callback_query(F.data == "eat")
async def eat_handler(callback: CallbackQuery, state: FSMContext, API_KEY=API_KEY_2GIS):
    await callback.answer()
    data = await state.get_data()
    user_latitude = data.get("latitude")
    user_longitude = data.get("longitude")
    if user_latitude is None or user_longitude is None:
        await callback.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.")
        return
    user_id = callback.from_user.id
    preferences = await get_user_preferences_or_notify(user_id, callback, pool)
    if not preferences:
        return

    cuisine = preferences.get("cuisine")
    if not cuisine:
        await callback.message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫—É—Ö–Ω—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await callback.message.answer(f"–ò—â–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º üîÑ")
    places = await search_by_cuisine(cuisine, API_KEY, user_longitude, user_latitude)

    if places:
        await callback.message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:")
        for place in places[:5]:
            name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            description = place.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            address = place.get('address_name', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            rating = place.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
            if not description:
                description = answer(description, f"–¢–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å—Å –∏ —Ä–µ–π—Ç–∏–Ω–≥ ({name}, {address}, {rating})")
            purpose_name = place.get("purpose_name")
            try:
                name_out = name.split(",")[1] if name.split(",")[1] == purpose_name.lower() else name
            except AttributeError:
                name_out = name
            latitude = place.get("latitude")
            longitude = place.get("longitude")
            await callback.message.answer(f"üè¨ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name.split(",")[0]}\nüìç *–ê–¥—Ä–µ—Å:* {address}\n *–û–ø–∏—Å–∞–Ω–∏–µ:* {description if description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating} ‚≠ê\n\n"
                                                "–í–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:", parse_mode="Markdown")
            await callback.message.answer_venue(
                title=name_out,
                address=address,
                latitude=latitude,
                longitude=longitude,
                user_latitude=user_latitude,
                user_longitude=user_longitude
            )
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(F.data == "visit", pointForm.waiting_for_location)
async def visit_handler(callback: CallbackQuery, state: FSMContext, API_KEY=API_KEY_2GIS):
    global interests
    data = await state.get_data()
    user_latitude = data.get("latitude")
    user_longitude = data.get("longitude")
    if user_latitude is None or user_longitude is None:
        await callback.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.")
        return
    user_id = callback.from_user.id
    preferences = await get_user_preferences_or_notify(user_id, callback, pool)
    if preferences:
        interests = preferences.get("interests", [])
        await callback.message.answer(f"–ò—â–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º üîÑ")
    else:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

    places = await search_by_interests(interests, API_KEY, user_longitude, user_latitude)

    if places:
        await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–≤–µ–¥—ë—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ üîÑ\n"
                                      "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:")
        for place in places[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç
            name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
            description = place.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            address = place.get('address_name', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            rating = place.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            if not description:
                description = answer(description, f"–¢–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å—Å –∏ —Ä–µ–π—Ç–∏–Ω–≥ ({name}, {address}, {rating})")
            purpose_name = place.get("purpose_name")
            try:
                name_out = name.split(",")[1] if name.split(",")[1] == purpose_name.lower() else name
            except AttributeError:
                name_out = name
            latitude = place.get("latitude")
            longitude = place.get("longitude")
            await callback.message.answer(f"üè¨ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name_out}\nüìç *–ê–¥—Ä–µ—Å:* {address}\nüìÖ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description if description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}\n‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating} ‚≠ê\n\n"
                                                "–í–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:", parse_mode="Markdown")
            await callback.message.answer_venue(
                title=name_out,
                address=address,
                latitude=latitude,
                longitude=longitude,
                user_latitude=user_latitude,
                user_longitude=user_longitude
            )
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
