from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from app.states import PreferencesForm, RateForm, pointForm
import app.keyboards as kb
import json

from app.utils import search_by_cuisine, search_by_interests
from config import API_KEY_2GIS
from db.db import create_pool, get_user_preferences_or_notify

router = Router()
pool = None
class Registration(StatesGroup):
    id = State()


class PhotoCreate(StatesGroup):
    photos = State()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    global pool
    pool = await create_pool()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è\n–≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –æ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É! üåÜ‚ú®\n"
        f"–¢—ã ‚Äî —Ç—É—Ä–∏—Å—Ç –∏–ª–∏ –º–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å? –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –º—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –æ—Ç–∫—Ä—ã—Ç—å –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ\n"
        f"–∏–ª–∏ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è"
        f"\n–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∫—É—Ö–Ω–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è)")
    await state.set_state(PreferencesForm.cuisine)


@router.message(PreferencesForm.cuisine)
async def process_cuisine(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cuisine = message.text.split(", ")
    await state.update_data(cuisine=cuisine)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ç—É—Ä–∏–∑–º)")
    await state.set_state(PreferencesForm.interests)


@router.message(PreferencesForm.interests)
async def process_interests(message: Message, state: FSMContext):
    user_id = message.from_user.id
    interests = message.text.split(", ")
    data = await state.get_data()
    preferences = {
        "cuisine": data["cuisine"],
        "interests": interests
    }
    async with pool.acquire() as connection:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        exists = await connection.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        if exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            await connection.execute("UPDATE users SET preferences = $1 WHERE user_id = $2", json.dumps(preferences),
                                     user_id)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await connection.execute("INSERT INTO users (user_id, username, preferences) VALUES ($1, $2, $3)", user_id,
                                     message.from_user.username, json.dumps(preferences))
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb.start)


@router.callback_query(F.data == "On_the_way")
async def On_the_way(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(id=callback.from_user.id)
    data = await state.get_data()
    await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ!üåü –ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?\n"
                                  f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,\n"
                                  f"–≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å üçΩÔ∏è –∏–ª–∏ —Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä üõçÔ∏è?\n"
                                  f"–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å, –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º", reply_markup=kb.location_keyboard)
    await state.clear()

@router.message(F.location)
async def handle_location(message: Message, state: FSMContext):
    global latitude
    global longitude
    latitude = message.location.latitude
    longitude = message.location.longitude
    await message.answer(f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: —à–∏—Ä–æ—Ç–∞ {latitude}, –¥–æ–ª–≥–æ—Ç–∞ {longitude}."
                         f"\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=kb.apply_info)
    await state.update_data(latitude=latitude, longitude=longitude)
    await state.set_state(pointForm.waiting_for_location)

####
@router.message(Command("recommendations"))
async def get_recommendations(message: Message):
    user_id = message.from_user.id
    async with pool.acquire() as connection:
        preferences = await connection.fetchrow("SELECT preferences FROM users WHERE user_id = $1", user_id)
        if preferences:
            preferences = json.loads(preferences["preferences"])
            recommendations = generate_recommendations(preferences)
            await message.answer(f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@router.message(Command("rate"))
async def rate_place(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
    await RateForm.place.set()


@router.message(RateForm.place)
async def process_place(message: Message, state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5):")
    await RateForm.rating.set()


@router.message(RateForm.rating)
async def process_rating(message: Message, state: FSMContext):
    user_id = message.from_user.id
    rating = int(message.text)
    data = await state.get_data()
    place = data["place"]
    async with pool.acquire() as connection:
        await connection.execute("INSERT INTO ratings (user_id, place_name, rating) VALUES ($1, $2, $3)", user_id,
                                 place, rating)
    await message.answer(f"–ú–µ—Å—Ç–æ '{place}' –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ {rating}.")
    await state.clear()


def generate_recommendations(preferences):
    cuisine = preferences.get("cuisine", [])
    interests = preferences.get("interests", [])
    return f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {', '.join(cuisine)} –∫—É—Ö–Ω—è, –º–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ {', '.join(interests)}"

####

@router.callback_query(F.data == "eat", pointForm.waiting_for_location)
async def eat_handler(callback: CallbackQuery, state: FSMContext, API_KEY=API_KEY_2GIS):
    data = await state.get_data()
    user_latitude = data.get("latitude")
    user_longitude = data.get("longitude")
    if user_latitude is None or user_longitude is None:
        await callback.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.")
        return
    user_id = callback.from_user.id
    preferences = await get_user_preferences_or_notify(user_id, callback, pool)
    if not preferences:
        return

    cuisine = preferences.get("cuisine", [])
    if not cuisine:
        await callback.message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫—É—Ö–Ω—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await callback.message.answer(f"–ò—â–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º: {', '.join(cuisine)}")
    places = await search_by_cuisine(cuisine, API_KEY, user_longitude, user_latitude)

    if places:
        await callback.message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:")
        for place in places[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            address = place.get('address_name', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            rating = place.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            latitude = place.get("latitude")
            longitude = place.get("longitude")
            await callback.message.answer(f"{name}\n–ê–¥—Ä–µ—Å: {address}\n–†–µ–π—Ç–∏–Ω–≥: {rating}")
            await callback.message.answer("–í–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Å –∫–∞—Ä—Ç–æ–π
            await callback.message.answer_venue(
                title=name,
                address=address,
                latitude=latitude,
                longitude=longitude,
                user_latitude=user_latitude,
                user_longitude=user_longitude
            )
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(F.data == "visit", pointForm.waiting_for_location)
async def visit_handler(callback: CallbackQuery, state: FSMContext, API_KEY=API_KEY_2GIS):
    global interests
    data = await state.get_data()
    user_latitude = data.get("latitude")
    user_longitude = data.get("longitude")
    if user_latitude is None or user_longitude is None:
        await callback.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é.")
        return
    user_id = callback.from_user.id
    preferences = await get_user_preferences_or_notify(user_id, callback, pool)
    if preferences:
        interests = preferences.get("interests", [])
        await callback.message.answer(f"–ò—â–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º: {', '.join(interests)}")
    else:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

    places = await search_by_interests(interests, API_KEY, user_longitude, user_latitude)

    if places:
        await callback.message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:")
        for place in places[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç
            name = place.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
            address = place.get('address_name', "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            rating = place.get("rating", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            latitude = place.get("latitude")
            longitude = place.get("longitude")
            await callback.message.answer(f"{name}\n–ê–¥—Ä–µ—Å: {address}\n–†–µ–π—Ç–∏–Ω–≥: {rating}")

            await callback.message.answer("–í–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Å –∫–∞—Ä—Ç–æ–π
            await callback.message.answer_venue(
                title=name,
                address=address,
                latitude=latitude,
                longitude=longitude,
                user_latitude=user_latitude,
                user_longitude=user_longitude
            )
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
