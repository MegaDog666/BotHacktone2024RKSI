from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import requests

router = Router()

class Registration(StatesGroup):
    id = State()

class PhotoCreate(StatesGroup):
    photos = State()

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! üé©‚ú®\n"
                         f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –º–∏—Ä –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ —Å –æ–±—ë—Ä—Ç–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤. –°–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–∏ —à–µ–¥–µ–≤—Ä—ã –∏ –¥–∞—Ä–∏ —Ä–∞–¥–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º —Å—é—Ä–ø—Ä–∏–∑–æ–º!\n"
                         f"–î–∞–≤–∞–π —Ç–≤–æ—Ä–∏—Ç—å! üéÅüéâ", reply_markup=kb.start)


@router.callback_query(F.data == "register")
async def register(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(id=callback.from_user.id)
    data = await state.get_data()
    await callback.message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n"
                                  f"–í–∞—à ID: {data["id"]}\n"
                  f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅüé®", reply_markup=kb.create)
    await state.clear()

@router.callback_query(F.data == "create")
async def create(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PhotoCreate.photos)
    await callback.message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")

@router.message(PhotoCreate.photos, F.photo)
async def photo_import(message: Message, state: FSMContext):
    await state.update_data(photos=message.photo[-1].file_id)
    photo_id = await state.get_data()
    await message.answer_photo(photo=photo_id["photos"], caption=f"–≠—Ç–æ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", reply_markup=kb.apply_info)
    await state.clear()

@router.callback_query(F.data == "apply")
async def create(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PhotoCreate.photos)
    await callback.message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")


